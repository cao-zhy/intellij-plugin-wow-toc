/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.github.czy211.wowtoc;

import com.github.czy211.wowtoc.psi.TocTypes;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Toc.flex</tt>
 */
class TocLexer implements FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;
    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int WAITING_VALUE = 2;
    /* The ZZ_CMAP_Z table has 272 entries */
    static final char[] ZZ_CMAP_Z = zzUnpackCMap(
            "\1\0\1\100\1\200\u010d\100");
    /* The ZZ_CMAP_Y table has 192 entries */
    static final char[] ZZ_CMAP_Y = zzUnpackCMap(
            "\1\0\1\1\1\2\175\3\1\4\77\3");
    /* The ZZ_CMAP_A table has 320 entries */
    static final char[] ZZ_CMAP_A = zzUnpackCMap(
            "\11\0\1\2\1\5\1\7\1\10\1\6\22\0\1\11\2\0\1\4\11\0\1\53\1\67\13\0\1\3\6\0\1" +
                    "\65\1\17\1\46\1\25\1\26\1\22\1\16\1\0\1\34\1\0\1\42\1\56\1\30\1\47\1\55\1" +
                    "\64\1\0\1\23\1\15\1\35\1\14\1\62\1\45\1\31\10\0\1\50\1\63\1\51\1\24\1\12\1" +
                    "\20\1\60\1\44\1\32\1\0\1\40\1\52\1\57\1\13\1\41\1\36\1\54\1\21\1\27\1\33\1" +
                    "\37\1\61\1\0\1\66\1\0\1\43\1\0\1\1\10\0\1\7\242\0\2\7\26\0");
    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;
    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int[] ZZ_LEXSTATE = {
            0, 0, 1, 1
    };
    private static final String ZZ_ACTION_PACKED_0 =
            "\2\0\1\1\2\2\1\3\1\1\1\2\13\1\2\4" +
                    "\1\5\1\2\1\5\2\0\1\2\1\6\1\7\23\0" +
                    "\2\10\25\0\1\11\6\0\1\10\6\0\1\10\105\0" +
                    "\1\10\12\0";
    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();
    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\70\0\160\0\250\0\340\0\160\0\u0118\0\u0150" +
                    "\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310" +
                    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0" +
                    "\0\160\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658" +
                    "\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818" +
                    "\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8" +
                    "\0\u06c8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60" +
                    "\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20" +
                    "\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\160" +
                    "\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068" +
                    "\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180\0\160\0\u11b8\0\u11f0" +
                    "\0\u1228\0\u1260\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0" +
                    "\0\u13e8\0\u1420\0\u1458\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570" +
                    "\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730" +
                    "\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0" +
                    "\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0" +
                    "\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u1c38\0\u1c70" +
                    "\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30" +
                    "\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0" +
                    "\0\u2028\0\u2060\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178\0\u21b0" +
                    "\0\u21e8\0\u2220\0\u2258\0\u2290\0\u22c8\0\u2300";
    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
    private static final String ZZ_TRANS_PACKED_0 =
            "\1\3\1\4\1\5\1\6\1\7\2\4\1\3\1\5" +
                    "\1\10\3\3\1\11\5\3\1\12\1\3\1\13\3\3" +
                    "\1\14\2\3\1\15\1\16\11\3\1\17\5\3\1\20" +
                    "\1\21\3\3\1\22\2\3\1\23\1\14\1\3\1\24" +
                    "\1\25\1\26\2\24\1\27\1\25\1\24\2\30\56\24" +
                    "\5\31\4\0\56\31\1\32\1\31\1\4\3\31\2\27" +
                    "\2\0\56\31\1\32\2\31\1\5\2\31\3\0\1\33" +
                    "\1\5\55\31\1\32\4\34\1\35\63\34\2\31\1\5" +
                    "\1\31\1\34\3\0\1\33\1\10\55\31\1\32\5\31" +
                    "\4\0\1\31\1\36\35\31\1\37\16\31\1\32\5\31" +
                    "\4\0\1\31\1\40\54\31\1\32\5\31\4\0\1\31" +
                    "\1\41\54\31\1\32\5\31\4\0\42\31\1\42\13\31" +
                    "\1\32\5\31\4\0\2\31\1\43\53\31\1\32\5\31" +
                    "\4\0\21\31\1\44\34\31\1\32\5\31\4\0\30\31" +
                    "\1\45\25\31\1\32\5\31\4\0\25\31\1\46\30\31" +
                    "\1\32\5\31\4\0\30\31\1\47\25\31\1\32\5\31" +
                    "\4\0\1\31\1\50\54\31\1\32\5\31\4\0\26\31" +
                    "\1\51\27\31\1\32\5\24\1\0\2\24\1\0\60\24" +
                    "\1\25\3\24\1\27\1\25\1\24\1\0\61\24\1\26" +
                    "\2\24\1\0\2\24\1\30\1\26\56\24\1\0\1\27" +
                    "\3\0\2\27\63\0\1\30\5\0\2\30\56\0\5\31" +
                    "\4\0\20\31\1\52\20\31\1\53\3\31\1\53\7\31" +
                    "\1\52\1\32\2\0\1\33\5\0\2\33\56\0\5\34" +
                    "\4\0\57\34\4\0\1\34\63\0\5\31\4\0\40\31" +
                    "\1\54\15\31\1\32\5\31\4\0\50\31\1\55\5\31" +
                    "\1\32\5\31\4\0\43\31\1\56\12\31\1\32\5\31" +
                    "\4\0\7\31\1\57\6\31\1\60\6\31\1\42\30\31" +
                    "\1\32\3\61\1\31\1\61\2\0\1\62\1\0\57\61" +
                    "\5\31\4\0\22\31\1\63\33\31\1\32\5\31\4\0" +
                    "\22\31\1\64\33\31\1\32\5\31\4\0\22\31\1\65" +
                    "\33\31\1\32\5\31\4\0\22\31\1\66\33\31\1\32" +
                    "\5\31\4\0\37\31\1\67\16\31\1\32\5\31\4\0" +
                    "\10\31\1\70\45\31\1\32\5\31\4\0\22\31\1\71" +
                    "\33\31\1\32\5\31\4\0\17\31\1\72\26\31\1\72" +
                    "\7\31\1\32\5\31\4\0\3\31\1\73\22\31\1\73" +
                    "\27\31\1\32\5\31\4\0\26\31\1\74\27\31\1\32" +
                    "\5\31\4\0\1\31\1\75\54\31\1\32\5\31\4\0" +
                    "\26\31\1\76\27\31\1\32\5\31\4\0\37\31\1\77" +
                    "\16\31\1\32\5\31\4\0\40\31\1\100\15\31\1\32" +
                    "\3\62\1\0\1\62\2\0\1\62\1\0\57\62\5\31" +
                    "\4\0\1\31\1\101\54\31\1\32\5\31\4\0\41\31" +
                    "\1\102\14\31\1\32\5\31\4\0\1\31\1\103\54\31" +
                    "\1\32\5\31\4\0\21\31\1\104\34\31\1\32\5\31" +
                    "\4\0\13\31\1\105\42\31\1\32\5\31\4\0\16\31" +
                    "\1\106\37\31\1\32\5\31\4\0\33\31\1\107\22\31" +
                    "\1\32\5\31\4\0\41\31\1\110\3\31\1\110\10\31" +
                    "\1\32\5\31\4\0\37\31\1\110\14\31\1\110\1\31" +
                    "\1\32\5\31\4\0\10\31\1\111\45\31\1\32\5\31" +
                    "\4\0\13\31\1\112\42\31\1\32\5\31\4\0\21\31" +
                    "\1\113\34\31\1\32\5\31\4\0\26\31\1\114\27\31" +
                    "\1\32\5\31\4\0\10\31\1\115\45\31\1\32\5\31" +
                    "\4\0\10\31\1\116\45\31\1\32\5\31\4\0\1\31" +
                    "\1\117\54\31\1\32\5\31\4\0\16\31\1\117\37\31" +
                    "\1\32\5\31\4\0\30\31\1\120\25\31\1\32\5\31" +
                    "\4\0\17\31\1\121\14\31\1\122\7\31\1\123\11\31" +
                    "\1\32\5\31\4\0\21\31\1\124\34\31\1\32\5\31" +
                    "\4\0\30\31\1\125\25\31\1\32\5\31\4\0\1\31" +
                    "\1\126\54\31\1\32\5\31\4\0\51\31\1\127\4\31" +
                    "\1\32\5\31\4\0\10\31\1\130\45\31\1\32\5\31" +
                    "\4\0\41\31\1\131\14\31\1\32\5\31\4\0\21\31" +
                    "\1\132\34\31\1\32\5\31\4\0\7\31\1\133\46\31" +
                    "\1\32\5\31\4\0\42\31\1\134\13\31\1\32\5\31" +
                    "\4\0\2\31\1\135\53\31\1\32\5\31\4\0\37\31" +
                    "\1\136\16\31\1\32\5\31\4\0\21\31\1\137\34\31" +
                    "\1\32\5\31\4\0\2\31\1\140\53\31\1\32\5\31" +
                    "\4\0\30\31\1\141\25\31\1\32\5\31\4\0\10\31" +
                    "\1\126\45\31\1\32\5\31\4\0\37\31\1\142\16\31" +
                    "\1\32\5\31\4\0\1\31\1\143\54\31\1\32\5\31" +
                    "\4\0\22\31\1\144\33\31\1\32\5\31\4\0\25\31" +
                    "\1\145\30\31\1\32\5\31\4\0\37\31\1\146\16\31" +
                    "\1\32\5\31\4\0\1\31\1\147\5\31\1\150\1\151" +
                    "\2\31\1\152\5\31\1\153\3\31\1\154\1\31\1\155" +
                    "\2\31\1\156\23\31\1\32\5\31\4\0\37\31\1\157" +
                    "\16\31\1\32\5\31\4\0\2\31\1\160\53\31\1\32" +
                    "\5\31\4\0\22\31\1\161\33\31\1\32\5\31\4\0" +
                    "\14\31\1\162\41\31\1\32\5\31\4\0\2\31\1\126" +
                    "\53\31\1\32\5\31\4\0\10\31\1\163\45\31\1\32" +
                    "\5\31\4\0\13\31\1\164\42\31\1\32\5\31\4\0" +
                    "\4\31\1\165\51\31\1\32\5\31\4\0\22\31\1\166" +
                    "\33\31\1\32\5\31\4\0\40\31\1\111\15\31\1\32" +
                    "\5\31\4\0\2\31\1\167\13\31\1\170\37\31\1\32" +
                    "\5\31\4\0\10\31\1\171\45\31\1\32\5\31\4\0" +
                    "\26\31\1\172\27\31\1\32\5\31\4\0\1\31\1\173" +
                    "\54\31\1\32\5\31\4\0\22\31\1\174\33\31\1\32" +
                    "\5\31\4\0\22\31\1\175\33\31\1\32\5\31\4\0" +
                    "\30\31\1\176\25\31\1\32\5\31\4\0\33\31\1\177" +
                    "\22\31\1\32\5\31\4\0\41\31\1\164\14\31\1\32" +
                    "\5\31\4\0\37\31\1\200\16\31\1\32\5\31\4\0" +
                    "\33\31\1\126\22\31\1\32\5\31\4\0\1\31\1\201" +
                    "\54\31\1\32\5\31\4\0\21\31\1\202\34\31\1\32" +
                    "\5\31\4\0\14\31\1\203\41\31\1\32\5\31\4\0" +
                    "\22\31\1\204\33\31\1\32\5\31\4\0\21\31\1\205" +
                    "\34\31\1\32\5\31\4\0\3\31\1\206\1\31\1\207" +
                    "\50\31\1\32\5\31\4\0\15\31\1\206\1\31\1\210" +
                    "\36\31\1\32\5\31\4\0\11\31\1\211\44\31\1\32" +
                    "\5\31\4\0\12\31\1\212\43\31\1\32\5\31\4\0" +
                    "\14\31\1\213\41\31\1\32\5\31\4\0\23\31\1\214" +
                    "\32\31\1\32\5\31\4\0\6\31\1\211\47\31\1\32" +
                    "\5\31\4\0\31\31\1\211\24\31\1\32\5\31\4\0" +
                    "\24\31\1\215\10\31\1\216\20\31\1\32\5\31\4\0" +
                    "\47\31\1\217\6\31\1\32\5\31\4\0\46\31\1\220" +
                    "\7\31\1\32\5\31\4\0\37\31\1\221\16\31\1\32" +
                    "\5\31\4\0\1\31\1\222\54\31\1\32\5\31\4\0" +
                    "\37\31\1\223\16\31\1\32\5\31\4\0\30\31\1\224" +
                    "\25\31\1\32\5\31\4\0\4\31\1\126\51\31\1\32" +
                    "\5\31\4\0\6\31\1\126\47\31\1\32\5\31\4\0" +
                    "\20\31\1\126\35\31\1\32\5\31\4\0\12\31\1\126" +
                    "\43\31\1\32\5\31\4\0\3\31\1\126\52\31\1\32" +
                    "\5\31\4\0\15\31\1\126\40\31\1\32\5\31\4\0" +
                    "\24\31\1\126\31\31\1\32\5\31\4\0\34\31\1\126" +
                    "\21\31\1\32\5\31\4\0\36\31\1\126\17\31\1\32" +
                    "\5\31\4\0\1\31\1\225\54\31\1\32\5\31\4\0" +
                    "\37\31\1\226\16\31\1\32\5\31\4\0\52\31\1\227" +
                    "\3\31\1\32\5\31\4\0\25\31\1\230\30\31\1\32" +
                    "\5\31\4\0\22\31\1\111\33\31\1\32\5\31\4\0" +
                    "\2\31\1\117\53\31\1\32\5\31\4\0\10\31\1\230" +
                    "\45\31\1\32\5\31\4\0\2\31\1\231\53\31\1\32" +
                    "\5\31\4\0\41\31\1\232\14\31\1\32\5\31\4\0" +
                    "\16\31\1\126\37\31\1\32\5\31\4\0\13\31\1\126" +
                    "\42\31\1\32\5\31\4\0\1\31\1\233\54\31\1\32" +
                    "\5\31\4\0\16\31\1\234\37\31\1\32\5\31\4\0" +
                    "\53\31\1\235\2\31\1\32\5\31\4\0\1\31\1\236" +
                    "\54\31\1\32\5\31\4\0\10\31\1\237\45\31\1\32" +
                    "\5\31\4\0\35\31\1\240\20\31\1\32\5\31\4\0" +
                    "\33\31\1\241\22\31\1\32\5\31\4\0\37\31\1\242" +
                    "\16\31\1\32\5\31\4\0\10\31\1\243\45\31\1\32" +
                    "\5\31\4\0\37\31\1\244\16\31\1\32\5\31\4\0" +
                    "\40\31\1\245\15\31\1\32\5\31\4\0\22\31\1\246" +
                    "\33\31\1\32\5\31\4\0\1\31\1\125\54\31\1\32";
    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();
    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;
    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };
    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\2\0\26\1\2\0\3\1\23\0\2\1\25\0\1\1" +
                    "\6\0\1\1\6\0\1\1\105\0\1\1\12\0";
    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
    /**
     * the input device
     */
    private java.io.Reader zzReader;
    /**
     * the current state of the DFA
     */
    private int zzState;
    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;
    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";
    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;
    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;
    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;
    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;
    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;
    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;
    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    TocLexer(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Translates characters to character classes
     * Chosen bits are [9, 6, 6]
     * Total runtime size is 1568 bytes
     */
    public static int ZZ_CMAP(int ch) {
        return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch >> 12] | ((ch >> 6) & 0x3f)] << 6) | (ch & 0x3f)];
    }

    private static int[] zzUnpackAction() {
        int[] result = new int[166];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackRowMap() {
        int[] result = new int[166];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    private static int[] zzUnpackTrans() {
        int[] result = new int[9016];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackAttribute() {
        int[] result = new int[166];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        int size = 0;
        for (int i = 0, length = packed.length(); i < length; i += 2) {
            size += packed.charAt(i);
        }
        char[] map = new char[size];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < packed.length()) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false}, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position {@code pos} from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     * A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     * This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Contains user EOF-code, which will be executed exactly once,
     * when the end of file is reached
     */
    private void zzDoEOF() {
        if (!zzEOFDone) {
            zzEOFDone = true;

        }
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                zzDoEOF();
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return TokenType.BAD_CHARACTER;
                    }
                    // fall through
                    case 10:
                        break;
                    case 2: {
                        yybegin(YYINITIAL);
                        return TokenType.WHITE_SPACE;
                    }
                    // fall through
                    case 11:
                        break;
                    case 3: {
                        yybegin(WAITING_VALUE);
                        return TocTypes.SEPARATOR;
                    }
                    // fall through
                    case 12:
                        break;
                    case 4: {
                        yybegin(WAITING_VALUE);
                        return TocTypes.TAG_VALUE;
                    }
                    // fall through
                    case 13:
                        break;
                    case 5: {
                        yybegin(WAITING_VALUE);
                        return TokenType.WHITE_SPACE;
                    }
                    // fall through
                    case 14:
                        break;
                    case 6: {
                        yybegin(YYINITIAL);
                        return TocTypes.COMMENT;
                    }
                    // fall through
                    case 15:
                        break;
                    case 7: {
                        yybegin(YYINITIAL);
                        return TocTypes.TAG_PREFIX;
                    }
                    // fall through
                    case 16:
                        break;
                    case 8: {
                        yybegin(YYINITIAL);
                        return TocTypes.TAG_NAME;
                    }
                    // fall through
                    case 17:
                        break;
                    case 9: {
                        yybegin(WAITING_VALUE);
                        return TocTypes.FILE_NAME;
                    }
                    // fall through
                    case 18:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
